{"version":3,"sources":["../../src/lib/ngx-funny-datepicker.service.ts","../../src/lib/ngx-funny-datepicker.component.ts","../../src/lib/datepicker/datepicker.component.ts","../../src/lib/out-side.directive.ts","../../src/lib/ngx-funny-datepicker.module.ts"],"names":["Injectable","args","providedIn","NgxFunnyDatepickerComponent","_this","this","valueDate","EventEmitter","startDate","moment","locale","rangeLabel","timeLabel","clearLabel","emitValue","data","emit","prototype","ngOnInit","Component","selector","template","Output","Input","moment_","DatepickerComponent","renderer","value","emitSelected","weekDaysHeaderArr","gridArr","canAccessPrevious","canAccessNext","todayDate","set","hour","minute","second","millisecond","renderedFlag","mode","isInvalid","formatInputDate","onChange","_","onTouch","onTouched","concatValueInput","concatValue","format","endDate","join","generateAllYear","currentYear","navDate","year","forEach","a","days","makeGrid","reFormatInput","simulateClicks","tmpStartDate","clone","nextDay","simulateClick","tmpEndDate","nextDayEnd","changeNavMonth","date","infinity","setTimeout","getDayNext","document","querySelector","click","obj","available","inRange","isActive","isToday","month","parseInt","selectDay","tmpGrid","e","setOptions","isValid","includeEndDate","makeHeader","currentMonth","onInput","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","includeTime","setAccess","canChangeNavMonth","num","add","console","log","clonedDate","canChangeNavMonthLogic","day","push","weekday","getDimensions","firstDayDate","startOf","initialEmptyCells","lastDayDate","endOf","lastEmptyCells","arrayLength","daysInMonth","hasOwnProperty","i","isAvailable","dateFromDayAndMonthAndYear","isSame","startDay","endDay","dateToCheck","dateFromNum","isAvailableLogic","referenceDate","selectedDate","currDate","isSameOrBefore","isSameOrAfter","generateDate","applyRange","selected","resetActivity","generatedDate","resetRange","Object","keys","map","timeObject","start","startMonthLength","endMonthLength","end","calendar","minDate","maxDate","isBefore","isAfter","currentDate","isBetween","toggleCalendar","isOpen","openCalendar","closeCalendar","changeMode","clear","startTime","endTime","setTime","handleModeChange","setStartTime","time","setEndTime","handleTimeChange","replace","lastTwo","substr","length","toUpperCase","last","hasLastTwo","includes","isAm","Number","startTimePicker","nativeElement","blur","endTimePicker","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","ViewChild","OutSideDirective","elementRef","clickOutside","onClick","target","classElement","classList","Array","from","contains","Directive","ElementRef","HostListener","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxFunnyDatepickerService {\n\n  constructor() { }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'ngx-funny-datepicker-dummy',\n  template: `\n    Please use ngx-funny-datepicker\n  `,\n  styles: []\n})\nexport class NgxFunnyDatepickerComponent implements OnInit {\n  @Output() valueDate = new EventEmitter<any>();\n  @Input() isRange: boolean;\n  @Input() hasTime: boolean;\n  @Input() startDate: any = moment();\n  @Input() endDate: any;\n  @Input() minDate: any;\n  @Input() maxDate: any;\n  @Input() locale = 'en';\n  @Input() rangeLabel = 'Range';\n  @Input() timeLabel = 'Time';\n  @Input() clearLabel = 'Clear';\n  @Input() classInput: string;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  emitValue = (data) => this.valueDate.emit(data);\n\n}\n","// tslint:disable-next-line: radix\nimport { Renderer2 } from '@angular/core';\nimport { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Component({\n  selector: 'ngx-funny-datepicker',\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DatepickerComponent),\n      multi: true\n    }\n  ]\n})\nexport class DatepickerComponent implements OnInit, ControlValueAccessor {\n  @Input() value: any = '';\n  // @ts-ignore\n  @ViewChild('startTimePicker') startTimePicker: ElementRef;\n  // @ts-ignore\n  @ViewChild('endTimePicker') endTimePicker: ElementRef;\n  @Input() isRange: boolean;\n  @Input() hasTime: boolean;\n  @Input() startDate: any;\n  @Input() endDate: any;\n  @Input() minDate: any;\n  @Input() maxDate: any;\n  @Input() classInput: string;\n  @Input() locale = 'en';\n  @Input() rangeLabel = 'Range';\n  @Input() timeLabel = 'Time';\n  @Input() clearLabel = 'Clear';\n  @Input() includeEndDate: boolean;\n  @Output() emitSelected = new EventEmitter<any>();\n  isOpen: boolean;\n  navDate: any;\n  weekDaysHeaderArr: Array<string> = [];\n  gridArr: any = {};\n  selectedDate: any;\n  canAccessPrevious = true;\n  canAccessNext = true;\n  todayDate = moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n  startDay: any;\n  endDay: any;\n  renderedFlag = true;\n  mode = 'end';\n  initialEmptyCells: number;\n  lastEmptyCells: number;\n  arrayLength: number;\n  currentMonth: number;\n  currentYear: number;\n  selected: any;\n  startTime: any;\n  endTime: any;\n  isInvalid = false;\n  includeTime: boolean;\n  formatInputDate = 'D MMM, YYYY';\n  /**\n   * ControlAccessor\n   */\n  onTouched: boolean;\n  isDisabled: boolean;\n  onChange = (_: any) => { };\n  onTouch = () => {\n    this.onTouched = true\n  };\n\n  constructor(private renderer: Renderer2) {\n\n\n  }\n\n  ngOnInit() {\n    this.setOptions();\n    /**\n     * Set startDate and parse\n     */\n\n    if (this.startDate && moment(this.startDate).isValid()) {\n      this.startDate = moment(this.startDate);\n    } else {\n      this.startDate = moment();\n    }\n\n    /**\n     * Set endDate and parse\n     */\n\n    if (this.endDate && moment(this.endDate).isValid()) {\n      this.endDate = moment(this.endDate);\n      this.includeEndDate = true;\n    } else {\n      this.endDate = null;\n    }\n\n    this.concatValueInput();\n    this.navDate = this.startDate;\n    this.makeHeader();\n    this.currentMonth = this.navDate.month();\n    this.currentYear = this.navDate.year();\n    // this.generateAllYear();\n    this.makeGrid(this.currentYear, this.currentMonth);\n    this.isInvalid = !(this.value.length);\n  }\n\n  /**\n   *\n   * controlValueAccessor\n   */\n  onInput(value) {\n    this.value = value;\n    this.onTouch();\n    this.onChange(this.value);\n  }\n\n  writeValue(value: any): void {\n    if (value) {\n      this.value = value || '';\n    } else {\n      this.value = '';\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  /**\n   *\n   * @param value\n   */\n\n\n  setOptions() {\n    moment.locale(this.locale);\n    this.includeEndDate = false;\n    this.includeTime = false;\n  }\n\n  /**\n   * Concat values date to string format for show in input\n   */\n  concatValueInput = () => {\n    const concatValue = [\n      this.startDate.format(this.formatInputDate),\n      (this.endDate) ? '  -  ' : '',\n      (this.endDate) ? this.endDate.format(this.formatInputDate) : ''\n    ];\n    this.value = concatValue.join('');\n    this.isInvalid = !(this.value.length);\n\n  }\n\n  setAccess() {\n    this.canAccessPrevious = this.canChangeNavMonth(-1);\n    this.canAccessNext = this.canChangeNavMonth(1);\n  }\n\n  changeNavMonth(num: number, mode = 'next') {\n    if (this.canChangeNavMonth(num)) {\n      if (mode === 'next') {\n        this.navDate.add(num, 'month');\n      } else {\n        console.log(num);\n\n        this.navDate = moment(`${this.navDate.year()}-${num}-${this.navDate.days()}`, 'YYYY-MM-DD');\n      }\n      this.currentMonth = this.navDate.month();\n      this.currentYear = this.navDate.year();\n      this.makeGrid(this.currentYear, this.currentMonth);\n    }\n  }\n\n  generateAllYear = () => {\n    this.currentYear = this.navDate.year();\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].forEach(a => {\n      this.navDate = moment(`${this.navDate.year()}-${a}-${this.navDate.days()}`, 'YYYY-M-DD');\n      this.makeGrid(this.currentYear, a);\n    })\n\n  }\n\n  canChangeNavMonth(num: number) {\n    const clonedDate = moment(this.navDate);\n    return this.canChangeNavMonthLogic(num, clonedDate);\n  }\n\n  makeHeader() {\n    const weekDaysArr: Array<number> = [0, 1, 2, 3, 4, 5, 6];\n    weekDaysArr.forEach(day => this.weekDaysHeaderArr.push(moment().weekday(day).format('ddd')));\n  }\n\n  getDimensions(date: any) {\n    const firstDayDate = moment(date).startOf('month');\n    this.initialEmptyCells = firstDayDate.weekday();\n    const lastDayDate = moment(date).endOf('month');\n    this.lastEmptyCells = 6 - lastDayDate.weekday();\n    this.arrayLength = this.initialEmptyCells + this.lastEmptyCells + date.daysInMonth();\n  }\n\n  makeGrid(year, month) {\n    console.log(month, year);\n\n    if (!this.gridArr.hasOwnProperty(year)) {\n      this.gridArr[year] = {};\n    }\n    if (!this.gridArr[year].hasOwnProperty(month)) {\n      this.gridArr[year][month] = [];\n      this.getDimensions(this.navDate);\n      for (let i = 0; i < this.arrayLength; i++) {\n        const obj: any = {};\n        if (i < this.initialEmptyCells || i > this.initialEmptyCells + this.navDate.daysInMonth() - 1) {\n          obj.value = 0;\n          obj.available = false;\n          obj.isToday = false;\n        } else {\n          obj.value = i - this.initialEmptyCells + 1;\n          obj.available = this.isAvailable(i - this.initialEmptyCells + 1);\n          obj.isToday = this.isToday(i - this.initialEmptyCells + 1, month, year);\n          obj.month = month;\n          obj.date = this.navDate;\n          obj.year = year;\n          obj.isActive = false;\n          if (this.dateFromDayAndMonthAndYear(obj.value, month, year).isSame(this.startDate)) {\n            this.startDay = obj;\n          }\n          if (this.dateFromDayAndMonthAndYear(obj.value, month, year).isSame(this.endDate)) {\n            this.endDay = obj;\n          }\n          if (obj.isToday && !this.startDay && !this.endDay) {\n            this.startDay = obj;\n            this.endDay = obj;\n            obj.isActive = true;\n          }\n        }\n        obj.inRange = false;\n        this.gridArr[year][month].push(obj);\n      }\n    }\n    this.setAccess();\n  }\n\n  isAvailable(num: number): boolean {\n    const dateToCheck = this.dateFromNum(num, this.navDate);\n    return this.isAvailableLogic(dateToCheck);\n  }\n\n  isToday(num: number, month: number, year: number): boolean {\n    const dateToCheck = moment(this.dateFromDayAndMonthAndYear(num, month, year));\n    return dateToCheck.isSame(moment().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }));\n  }\n\n  dateFromNum(num: number, referenceDate: any): any {\n    const returnDate = moment(referenceDate);\n    return returnDate.date(num);\n  }\n\n  reFormatInput = () => {\n    this.concatValueInput();\n    this.formatInputDate = (this.includeTime) ? 'D MMM, YYYY h:mm A' : 'D MMM, YYYY';\n  }\n\n  selectDay(day: any) {\n    if (day.available) {\n      this.selectedDate = this.dateFromDayAndMonthAndYear(day.value, day.month, day.year);\n      if (this.includeEndDate) {\n        const currDate = this.dateFromDayAndMonthAndYear(day.value, day.month, day.year);\n        switch (this.mode) {\n          case 'end':\n            if (currDate.isSame(moment(this.startDate).startOf('day'))) {\n              this.mode = 'start';\n            } else if (currDate.isSameOrBefore(this.startDate)) {\n              this.endDay = this.startDay;\n              this.startDay = day;\n              this.mode = 'start';\n            } else {\n              this.endDay = day;\n            }\n            break;\n          case 'start':\n            if (currDate.isSame(moment(this.endDate).startOf('day'))) {\n              this.mode = 'end';\n            } else if (currDate.isSameOrAfter(this.endDate)) {\n              this.startDay = this.endDay;\n              this.endDay = day;\n              this.mode = 'end';\n            } else {\n              this.startDay = day;\n            }\n            break;\n        }\n        this.startDate = this.generateDate(this.startDay, this.startDate);\n        this.endDate = this.generateDate(this.endDay, this.endDate);\n        this.applyRange();\n        this.startDay.isActive = true;\n        this.endDay.isActive = true;\n        this.selected = {\n          startDate: this.startDate,\n          endDate: this.endDate\n        };\n      } else {\n        this.resetActivity();\n        this.startDate = this.selectedDate;\n        this.startDay = day;\n        this.startDay.isActive = true;\n        this.selected = {\n          startDate: this.startDate\n        };\n        this.emitSelected.emit(this.selected);\n      }\n      if (this.startDate && this.endDate) {\n        this.emitSelected.emit(this.selected);\n      }\n      this.reFormatInput();\n    }\n  }\n\n  generateDate(day: any, date: any) {\n    console.log(day);\n\n    let generatedDate = this.dateFromDayAndMonthAndYear(day.value, day.month, day.year);\n    if (date) {\n      generatedDate = generatedDate.set({ hour: date.hour(), minute: date.minute() });\n    }\n    return generatedDate;\n  }\n\n  resetRange() {\n    Object.keys(this.gridArr).forEach(year => {\n      Object.keys(this.gridArr[year]).forEach(month => {\n        this.gridArr[year][month].map(day => {\n          day.inRange = false;\n          day.isActive = false;\n        });\n      });\n    });\n  }\n\n  resetActivity() {\n    Object.keys(this.gridArr).forEach(year => {\n      Object.keys(this.gridArr[year]).forEach(month => {\n        this.gridArr[year][month].map(day => {\n          day.isActive = false;\n        });\n      });\n    });\n  }\n\n  dateFromDayAndMonthAndYear(day, month, year) {\n    let timeObject = { hour: 0, minute: 0, second: 0, millisecond: 0 };\n    if (this.includeTime) {\n      timeObject = { hour: this.startDate.hour(), minute: this.startDate.minute(), second: 0, millisecond: 0 };\n      this.startDate.format('h:mm A');\n    }\n    return moment([year, month, day]).set(timeObject);\n  }\n\n  applyRange() {\n    this.getDimensions(this.startDate);\n    const start = this.initialEmptyCells + this.startDay.value - 1;\n    const startMonthLength = this.arrayLength;\n    this.getDimensions(this.endDate);\n    const endMonthLength = this.arrayLength;\n    const end = this.initialEmptyCells + this.endDay.value - 1;\n    this.resetRange();\n    if (this.startDay.month !== this.endDay.month || this.startDay.year !== this.endDay.year) {\n      Object.keys(this.gridArr).forEach(year => {\n        const calendar = this.gridArr[year];\n        Object.keys(calendar).forEach(month => {\n          const days = this.gridArr[year][month];\n          if (month == this.startDay.month && year == this.startDay.year) {\n            for (let i = 0; i < start; i++) {\n              days[i].inRange = false;\n            }\n            for (let i = start; i < startMonthLength; i++) {\n              days[i].inRange = true;\n            }\n          } else if (month == this.endDay.month && year == this.endDay.year) {\n            for (let i = 0; i <= end; i++) {\n              days[i].inRange = true;\n            }\n            for (let i = end + 1; i < endMonthLength; i++) {\n              days[i].inRange = false;\n            }\n          } else if ((month > this.startDay.month || year > this.startDay.year) && (month < this.endDay.month || year < this.endDay.year)) {\n            days.forEach(day => day.inRange = true);\n          }\n        });\n      });\n    } else {\n      const month = this.startDay.month;\n      const year = this.startDay.year;\n      for (let i = 0; i < start; i++) {\n        this.gridArr[year][month][i].inRange = false;\n      }\n      for (let i = start; i <= end; i++) {\n        this.gridArr[year][month][i].inRange = true;\n      }\n      for (let i = end + 1; i < this.arrayLength; i++) {\n        this.gridArr[year][month][i].inRange = false;\n      }\n    }\n  }\n\n  isAvailableLogic(dateToCheck: any) {\n    if (this.minDate || this.maxDate) {\n      return !(dateToCheck.isBefore(this.minDate) || dateToCheck.isAfter(this.maxDate));\n    } else {\n      return !dateToCheck.isBefore(moment(), 'day');\n    }\n  }\n\n  canChangeNavMonthLogic(num, currentDate) {\n    currentDate.add(num, 'month');\n    const minDate = this.minDate ? this.minDate : moment().add(-1, 'month');\n    const maxDate = this.maxDate ? this.maxDate : moment().add(1, 'year');\n    return currentDate.isBetween(minDate, maxDate);\n  }\n\n  toggleCalendar(): any {\n    this.isOpen = !this.isOpen;\n  }\n\n  openCalendar(): any {\n    this.isOpen = true;\n    this.onTouch();\n    this.simulateClicks();\n  }\n\n  simulateClicks = () => {\n    if (this.startDate && !this.endDate) {\n      const tmpStartDate = this.startDate.clone();\n      const nextDay = tmpStartDate.format(`YYYY-${tmpStartDate.format('M') - 1}-D`);\n      this.simulateClick(nextDay, 'calendar-day-range');\n    }\n    if (this.startDate && this.endDate) {\n      const tmpEndDate = this.endDate.clone();\n      const nextDayEnd = tmpEndDate.format(`YYYY-${tmpEndDate.format('M') - 1}-D`);\n      this.simulateClick(nextDayEnd, 'calendar-day-not-range', true);\n      this.changeNavMonth(tmpEndDate.format('M'), 'fix');\n    }\n  }\n\n  closeCalendar(): any {\n    this.isOpen = false;\n    this.emitSelected.emit(this.selected);\n  }\n\n  changeMode(mode: string) {\n    this.mode = mode;\n    this.onTouch();\n  }\n\n\n  clear() {\n    this.resetRange();\n    this.startDate = moment();\n    this.endDate = null;\n    this.navDate = this.todayDate;\n    this.currentMonth = this.navDate.month();\n    this.currentYear = this.navDate.year();\n    this.includeEndDate = false;\n    this.includeTime = false;\n    this.startTime = null;\n    this.endTime = null;\n    this.mode = 'start';\n    this.makeGrid(this.currentYear, this.currentMonth);\n    this.reFormatInput();\n  }\n\n  setTime(moment, hour: number = 0, minute: number = 0) {\n    return moment.set({ hour, minute, second: 0, millisecond: 0 });\n  }\n\n  handleModeChange() {\n    this.resetRange();\n    this.mode = 'end';\n    if (this.startDay) {\n      this.startDay.isActive = true;\n    }\n    if (!this.includeEndDate) {\n      this.endDate = null;\n      this.mode = 'start';\n      this.startDay.isActive = false;\n      this.endDay.isActive = false;\n    } else {\n      const tmpStartDate = this.startDate.clone();\n      const nextDay = tmpStartDate.add(2, 'days').format(`YYYY-${tmpStartDate.format('M') - 1}-D`);\n      this.simulateClick(nextDay, 'calendar-day-not-range');\n    }\n\n  }\n\n  simulateClick = (date: string, mode = 'calendar-day-range', infinity = false) => {\n    try {\n      setTimeout(() => {\n        const getDayNext = document.querySelector(`.${mode}-${date} > button`) as any;\n        if (getDayNext) {\n          getDayNext.click();\n        }\n        if (!getDayNext && infinity) {\n          const endDate = this.endDate.clone();\n          const obj = {\n            available: true,\n            inRange: true,\n            isActive: false,\n            date: this.navDate,\n            isToday: false,\n            month: parseInt(endDate.format('M')) - 1,\n            value: parseInt(endDate.format('D')),\n            year: parseInt(endDate.format('YYYY'))\n          };\n          this.selectDay(obj);\n          const tmpGrid = this.gridArr;\n          this.gridArr = false;\n          this.gridArr = tmpGrid;\n          const startDate = this.startDate.clone();\n          const nextDay = startDate.format(`YYYY-${startDate.format('M') - 1}-D`);\n          const getFixClick = document.querySelector(`.calendar-day-not-range-${nextDay} > button`) as any;\n          // getFixClick.click();\n        }\n      }, 1);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  setStartTime(time) {\n    this.startTime = time;\n  }\n\n  setEndTime(time) {\n    this.endTime = time;\n  }\n\n  // tslint:disable-next-line:no-shadowed-variable\n  handleTimeChange(time: any, moment: any, mode: string) {\n    this.reFormatInput();\n    if (!time) {\n      return;\n    }\n    time = time.replace(/[^a-zA-Z0-9]/g, '');\n    moment.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n    let lastTwo = time.substr(time.length - 2).toUpperCase();\n    let last = time.substr(time.length - 1).toUpperCase();\n    const hasLastTwo = ['AM', 'PM'].includes(lastTwo);\n    const hasLast = ['A', 'P'].includes(last);\n    let isAm = true;\n    let isPm = false;\n    if (hasLast || hasLastTwo) {\n      isAm = last === 'A' || lastTwo === 'AM';\n      isPm = last === 'P' || lastTwo === 'PM';\n    }\n    time = time.replace(/[^0-9]/g, '');\n    lastTwo = time.substr(time.length - 2);\n    last = time.substr(time.length - 1);\n    time = time.substr(0, 4);\n    this.isInvalid = false;\n    switch (time.length) {\n      case 1:\n        moment\n          = isAm ? this.setTime(moment, Number(time)) :\n            this.setTime(moment, Number(time) + 12);\n        break;\n      case 2:\n        if (last >= 6) {\n          this.isInvalid = true;\n          break;\n        }\n        if (time === 12) {\n          moment\n            = isAm ? this.setTime(moment, 0) :\n              this.setTime(moment, 12);\n        } else if (time < 12) {\n          moment\n            = isAm ? this.setTime(moment, Number(time)) :\n              this.setTime(moment, Number(time) + 12);\n        } else {\n          moment\n            = isAm ? this.setTime(moment, Number(time[0]), Number(last)) :\n              this.setTime(moment, Number(time[0]) + 12, Number(last));\n        }\n        break;\n      case 3:\n        if (lastTwo >= 60) {\n          this.isInvalid = true;\n          break;\n        } else {\n          moment\n            = isAm ? this.setTime(moment, Number(time[0]), Number(lastTwo)) :\n              this.setTime(moment, Number(time[0]) + 12, Number(lastTwo));\n        }\n        break;\n      case 4:\n        if (lastTwo >= 60) {\n          this.isInvalid = true;\n          break;\n        }\n        moment = this.setTime(moment, Number(time.substr(0, 2)), Number(lastTwo));\n        break;\n      default:\n        this.isInvalid = true;\n        break;\n    }\n    console.log('--', this.isInvalid)\n    this.emitSelected.emit(this.selected);\n    if (mode === 'start') {\n      this.startDate = moment;\n      this.startTimePicker.nativeElement.blur();\n    } else {\n      this.endDate = moment;\n      this.endTimePicker.nativeElement.blur();\n    }\n  }\n\n}\n","import {Directive, ElementRef, EventEmitter, HostListener, Output} from '@angular/core';\n\n@Directive({\n  selector: '[clickOutside]'\n})\nexport class OutSideDirective {\n\n  @Output() clickOutside = new EventEmitter<void>();\n\n  constructor(private elementRef: ElementRef) {\n  }\n\n  @HostListener('document:click', ['$event.target'])\n  public onClick(target) {\n    const classElement = target.classList || [];\n    if (!Array.from(classElement).includes('omit-trigger-outside')) {\n      const clickedInside = this.elementRef.nativeElement.contains(target);\n      if (!clickedInside) {\n        this.clickOutside.emit();\n      }\n    }\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxFunnyDatepickerComponent } from './ngx-funny-datepicker.component';\nimport { DatepickerComponent } from './datepicker/datepicker.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { OutSideDirective } from './out-side.directive';\n\n\n\n@NgModule({\n  declarations: [NgxFunnyDatepickerComponent, DatepickerComponent, OutSideDirective],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [DatepickerComponent]\n})\nexport class NgxFunnyDatepickerModule { }\n"]}